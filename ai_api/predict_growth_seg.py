from ultralytics import YOLO
from PIL import Image
import numpy as np
import cv2
import base64
from io import BytesIO
import random


# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLOv8 (Segmentation) ‚Äî ‡∏õ‡∏£‡∏±‡∏ö path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
# ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô growth segmentation ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏•‡∏≤‡∏™: 0=abnormal, 1=normal
MODEL_PATH = "grow_seg.pt"
model = YOLO(MODEL_PATH)


def image_to_base64(image):
    if isinstance(image, np.ndarray):
        image = Image.fromarray(image)
    buffered = BytesIO()
    image.save(buffered, format="PNG")
    return base64.b64encode(buffered.getvalue()).decode("utf-8")


def predict_growth_seg(image_pil):
    try:
        image_cv2 = cv2.cvtColor(np.array(image_pil), cv2.COLOR_RGB2BGR)

        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        # results = model.predict(
        #     source=image_cv2,
        #     conf=0.15,
        #     iou=0.3,
        #     max_det=100,
        #     agnostic_nms=False,
        #     save=False,
        # )
        results = model.predict(
            source=image_cv2,
            conf=0.15,
            iou=0.3,
            max_det=100,
            agnostic_nms=False,
            save=False,
        )

        for r in results:
            img = r.orig_img.copy()
            h_img, w_img, _ = img.shape

            if r.masks is None:
                # ‡πÑ‡∏°‡πà‡∏û‡∏ö mask ‚Äî ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡∏•‡∏±‡∏ö
                bgr_fallback = cv2.cvtColor(np.array(image_pil), cv2.COLOR_RGB2BGR)
                pil_fallback = Image.fromarray(
                    cv2.cvtColor(bgr_fallback, cv2.COLOR_BGR2RGB)
                )
                return image_to_base64(pil_fallback)

            masks = r.masks.data.cpu().numpy()
            cls_ids = r.boxes.cls.cpu().numpy().astype(int)
            confidences = r.boxes.conf.cpu().numpy() if r.boxes.conf is not None else []

            print("\nüìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£ detection:")
            print(f"  - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô masks ‡∏ó‡∏µ‡πà‡∏û‡∏ö: {len(masks)}")
            if len(confidences) > 0:
                print(
                    "  - confidence scores:",
                    [f"{c:.3f}" for c in confidences],
                )

            instances = {"abnormal": [], "normal": []}

            for i, (mask, cls_id) in enumerate(zip(masks, cls_ids)):
                if cls_id not in [0, 1]:
                    continue

                mask_resized = cv2.resize(
                    mask, (w_img, h_img), interpolation=cv2.INTER_NEAREST
                )
                mask_bool = mask_resized.astype(bool)
                area = int(np.sum(mask_bool))

                # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏°‡∏≤‡∏Å
                if area < 100:
                    print(f"  ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° detection {i+1}: ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ({area} pixels)")
                    continue

                y, x = np.where(mask_bool)
                if len(x) == 0 or len(y) == 0:
                    continue
                cx, cy = int(np.mean(x)), int(np.mean(y))

                entry = {
                    "mask": mask_bool,
                    "area": area,
                    "center": (cx, cy),
                    "id": i + 1,
                }

                if cls_id == 0:
                    instances["abnormal"].append(entry)
                    print(
                        f"  ‚úÖ Abnormal #{len(instances['abnormal'])}: area={area}, center=({cx},{cy})"
                    )
                else:
                    instances["normal"].append(entry)
                    print(
                        f"  ‚úÖ Normal #{len(instances['normal'])}: area={area}, center=({cx},{cy})"
                    )

            print(
                f"\n[DEBUG] ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: abnormal {len(instances['abnormal'])} ‡∏à‡∏∏‡∏î, normal {len(instances['normal'])} ‡∏î‡∏≠‡∏Å"
            )

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á mask ‡∏™‡∏µ
            color_mask = np.zeros_like(img, dtype=np.uint8)

            # ‡∏£‡∏ß‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
            total_normal_area = (
                sum(n["area"] for n in instances["normal"])
                if instances["normal"]
                else 0
            )
            total_abnormal_area = (
                sum(a["area"] for a in instances["abnormal"])
                if instances["abnormal"]
                else 0
            )
            total_area = total_normal_area + total_abnormal_area

            has_abnormal = len(instances["abnormal"]) > 0

            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ abnormal ‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏ß‡πå normal
            if not has_abnormal:
                for i, normal in enumerate(instances["normal"], 1):
                    color_mask[normal["mask"]] = [0, 255, 0]
                    cx, cy = normal["center"]
                    cv2.putText(
                        img,
                        f"N{i}",
                        (cx - 10, cy - 10),
                        cv2.FONT_HERSHEY_SIMPLEX,
                        0.6,
                        (255, 255, 255),
                        2,
                    )

            # ‡πÇ‡∏ä‡∏ß‡πå abnormal ‡πÄ‡∏™‡∏°‡∏≠
            for i, abnormal in enumerate(instances["abnormal"], 1):
                color_mask[abnormal["mask"]] = [0, 0, 255]
                cx, cy = abnormal["center"]
                cv2.putText(
                    img,
                    f"A{i}",
                    (cx - 10, cy - 10),
                    cv2.FONT_HERSHEY_SIMPLEX,
                    0.6,
                    (255, 255, 255),
                    2,
                )
                cv2.circle(img, (cx, cy), 15, (0, 0, 255), 3)

            blended = cv2.addWeighted(img, 0.7, color_mask, 0.5, 0)
            blended_pil = Image.fromarray(cv2.cvtColor(blended, cv2.COLOR_BGR2RGB))

            safe = True

            # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÅ‡∏ö‡∏ö log
            if has_abnormal:
                safe = False
                abnormal_percent = (
                    (total_abnormal_area / total_area) * 100 if total_area > 0 else 0
                )
                print("\n" + "=" * 60)
                print("üçÑ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏≠‡∏Å‡πÄ‡∏´‡πá‡∏î (Enhanced Detection)")
                print("=" * 60)
                print("üî¥ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (ABNORMAL)")
                print(f"üìä ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: {abnormal_percent:.1f}%")
                print(f"üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: {len(instances['abnormal'])} ‡∏à‡∏∏‡∏î")
                print(f"üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏Å‡∏ï‡∏¥: {len(instances['normal'])} ‡∏î‡∏≠‡∏Å")
                print("\nüìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Abnormal segments:")
                for i, abnormal in enumerate(instances["abnormal"], 1):
                    area = abnormal["area"]
                    print(f"  A{i}: area={area:,} pixels")
            else:
                normal_percent = (
                    (total_normal_area / total_area) * 100 if total_area > 0 else 0
                )
                print("\n" + "=" * 60)
                print("üçÑ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏≠‡∏Å‡πÄ‡∏´‡πá‡∏î (Enhanced Detection)")
                print("=" * 60)
                print("üü¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏õ‡∏Å‡∏ï‡∏¥ (NORMAL)")
                print(f"üìä ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏Å‡∏ï‡∏¥: {normal_percent:.1f}%")
                print(f"üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏Å‡∏ï‡∏¥: {len(instances['normal'])} ‡∏î‡∏≠‡∏Å")

            print(f"üìè ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_area:,} pixels")

            if len(instances["abnormal"]) < 3:
                print("\nüí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏à‡∏∏‡∏î abnormal ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤:")
                print("  - ‡∏•‡∏î conf ‡πÄ‡∏õ‡πá‡∏ô 0.1 ‡∏´‡∏£‡∏∑‡∏≠ 0.05")
                print("  - ‡∏•‡∏î iou ‡πÄ‡∏õ‡πá‡∏ô 0.2")
                print("  - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ label ‡πÉ‡∏ô dataset")
            print("=" * 60)

            # ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏†‡∏≤‡∏û‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô base64 (‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á predict_spawn_seg)
            if safe:
                return [image_to_base64(blended_pil), "Normal"]
            else:
                return [image_to_base64(blended_pil), "Abnormal"]

        return ""
    except Exception:
        return ""
